CREATE OR REPLACE PROCEDURE P_DWA_V_M_3G_LOST_STEP2(V_MONTH   IN VARCHAR2,
                                                    V_PROV IN VARCHAR2,
                                                    V_RETCODE OUT VARCHAR2,
                                                    V_RETINFO OUT VARCHAR2) IS
  /*%
     *********************************************************
  *名称 --%@杜娅丽:
  *功能描述 --%@稳定度优化指标处理:
  *执行周期 --%@PERIOD:月
  *参数 --%@PARAM:V_MONTH 当月 YYYYMM
  *创建人 --%@CREATOR:
  *创建时间 --%@2015-05-25:
  *层次---%@LEVEL:DWA层
  *主题域---%@MASTER_FIELD:
  *备注 --%@REMARK:
  *修改记录 --%@MODIFY:
  *所属于实体--%@ENTITY:
  *来源表 --%@FROM:
  *来源表 --%@FROM:
  *来源表 --%@FROM:
  *来源表 --%@FROM:
  *来源表 --%@FROM:
  *来源表 --%@FROM:
  *目标表 --%@TO:
     **************************************************************
  %*/
  V_PKG      VARCHAR2(30);
  V_TAB      VARCHAR2(300);
  V_PROCNAME VARCHAR2(300);
  V_ROWLINE  NUMBER;
  V_COUNT    NUMBER;
  V_MONTH1   VARCHAR(6);
  V_MONTH2   VARCHAR(6);
  V_MONTH3   VARCHAR(6);
  V_MONTH4   VARCHAR(6);
  V_MONTH5   VARCHAR(6);
  V_MONTH6   VARCHAR(6);
/*  V_CNT      NUMBER;*/
  V_SQL      LONG;
  V_LOG_SN   NUMBER;
 /* V_DATE     VARCHAR2(8);*/
BEGIN
  V_PKG      := 'LOSTEST'; -- 分类
  V_TAB      := 'MID_V_M_3G_LOST_STEP2';
  V_PROCNAME := 'P_DWA_V_M_3G_LOST_STEP2'; -- 过程名称
/*  V_DATE  := TO_CHAR(LAST_DAY(TO_DATE(V_MONTH,'YYYYMM')),'YYYYMMDD');*/
  V_MONTH1   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),-1),'YYYYMM');
  V_MONTH2   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),-2),'YYYYMM');
  V_MONTH3   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),1),'YYYYMM');
  V_MONTH4   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),2),'YYYYMM');
  V_MONTH5   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),3),'YYYYMM');
  V_MONTH6   := TO_CHAR(ADD_MONTHS(TO_DATE(V_MONTH,'YYYYMM'),-5),'YYYYMM');
  SELECT ZB_CSM.SEQ_DWD_SQLPARSER.NEXTVAL
      INTO V_LOG_SN --运行日志序号
      FROM DUAL;
  --日志部分
  P_INSERT_SQLPARSER_LOG_GENERAL(V_LOG_SN,V_MONTH,V_PROV,'ZB_DWA',V_PROCNAME,'V_DATE='||V_MONTH||';V_PROV='||V_PROV ,SYSDATE,V_TAB);
  P_INSERT_LOG(V_MONTH ,V_PKG,V_PROCNAME,V_PROV,SYSDATE,V_TAB);

  --条件判断
   SELECT COUNT(1) INTO V_COUNT FROM MID_V_M_3G_LOST_STEP1
    WHERE MONTH_ID = V_MONTH
    AND PROV_ID = V_PROV
    AND ROWNUM < 11;

IF V_COUNT = 10 THEN

         V_SQL := 'ALTER TABLE ZB_CSM.MID_V_M_3G_LOST_STEP2 TRUNCATE SUBPARTITION PART'||V_MONTH||'_SUBPART'||V_PROV ;
      execute immediate v_sql;

V_SQL := 'INSERT INTO ZB_CSM.MID_V_M_3G_LOST_STEP2
SELECT
MONTH_ID,
PROV_ID,
AREA_ID,
CUST_ID,
SUBS_INSTANCE_ID,
DEVICE_NUMBER,
SERVICE_TYPE,
IS_CARD,
IS_FREE,
IS_TEST,
IS_AGREE,
IS_INNET,
IS_SANWU,
IS_LOWER_VALUE_USER,
USER_STATUS,
NVL(PAY_MODE_2,0) PAY_MODE_2,
CASE WHEN PRODUCT_TYPE IN (''A'',''B'',''C'') THEN 1
  WHEN PRODUCT_TYPE = ''I'' THEN 2
    ELSE 3
      END PRODUCT_TYPE,
CASE WHEN CHANNEL_TYPE = ''02'' THEN ''02''
  ELSE ''01''
    END CHANNEL_TYPE,
CASE WHEN TERM_TYPE = ''2'' THEN 2
  ELSE 1
    END TERM_TYPE,
CASE WHEN USE_STATUS_INNET = ''7'' THEN 1
  WHEN USE_STATUS_INNET IN (''4'',''5'') THEN 2
    ELSE 3
      END USE_STATUS_INNET,
NVL(LAST_IS_ACCT,0) LAST_IS_ACCT,
CASE WHEN MEMBER_LVL = ''99'' THEN 1
  ELSE 2
    END MEMBER_LVL,
CASE WHEN INNET_MONTH IS NULL OR INNET_MONTH < 0 THEN 0
  WHEN INNET_MONTH > 60 THEN ROUND(LN(61),2)
  ELSE ROUND(LN(INNET_MONTH + 1),2)
    END INNET_MONTH,
CASE WHEN CALL_RATIO IS NULL OR CALL_RATIO < 0 THEN 0
  WHEN ROUND(CALL_RATIO,2) > 6 THEN 6.1
  ELSE ROUND(CALL_RATIO,2)
    END CALL_RATIO,
CASE WHEN STREAM_RATIO IS NULL OR STREAM_RATIO < 0 THEN 0
  WHEN ROUND(STREAM_RATIO,2) > 6 THEN 6.1
  ELSE ROUND(STREAM_RATIO,2)
    END STREAM_RATIO,
CASE WHEN ROUND(ACCT_FEE) < 36 THEN 1
  WHEN ROUND(ACCT_FEE) >= 36 AND ROUND(ACCT_FEE) <= 96 THEN 2
    ELSE 3
      END ACCT_FEE,
CASE WHEN JF_TIMES IS NULL OR JF_TIMES < 0 THEN 0
  WHEN JF_TIMES > 1000 THEN ROUND(LN(1001),2)
  ELSE ROUND(LN(JF_TIMES+1),2)
    END JF_TIMES,
CASE WHEN P2P_SMS_CNT IN (0,1,2) THEN 0
  ELSE 1
    END P2P_SMS_CNT,
CASE WHEN TOTAL_FLUX IS NULL OR TOTAL_FLUX < 0 THEN 0
  WHEN ROUND(TOTAL_FLUX) > 950 THEN ROUND(LN(951),2)
  ELSE ROUND(LN(ROUND(TOTAL_FLUX)+1),2)
    END TOTAL_FLUX,
NVL(IS_PKG,0) IS_PKG,
CASE WHEN LAST_STOP_DATE > '''||V_MONTH||''' THEN 0
  WHEN LAST_STOP_DATE < '''||V_MONTH6||''' OR LAST_STOP_DATE IS NULL THEN 6
    ELSE MONTHS_BETWEEN(TO_DATE('''||V_MONTH||''',''YYYYMM''),TO_DATE(LAST_STOP_DATE,''YYYYMM''))
      END LAST_STOP_DATE,
CASE WHEN ROUND(ACCT_CN,2) <= 0 THEN 0-ROUND(ACCT_CN,2)
  WHEN ROUND(ACCT_CN,2) >= 10 THEN 10
    ELSE ROUND((ROUND(ACCT_CN,2) - 0)/10,2)
      END ACCT_CN,
CASE WHEN ROUND(FLUX_CN,2) <= 0 THEN 0-ROUND(FLUX_CN,2)
  WHEN ROUND(FLUX_CN,2) >= 20 THEN 20
    ELSE ROUND((ROUND(FLUX_CN,2) - 0)/20,2)
      END FLUX_CN,
CASE WHEN ROUND(TIMES_CN,2) <= 0 THEN 0-ROUND(TIMES_CN,2)
  WHEN ROUND(TIMES_CN,2) >= 15 THEN 15
    ELSE ROUND((ROUND(TIMES_CN,2) - 0)/15,2)
      END TIMES_CN,
CASE WHEN ROUND(CALL_CN7,2) <= 0.41 THEN 0.41-ROUND(CALL_CN7,2)
  WHEN ROUND(CALL_CN7,2) >= 10 THEN (10 - 0.41)/10
    ELSE ROUND((ROUND(CALL_CN7,2) - 0.41)/10,2)
      END CALL_CN7,
CASE WHEN YIWANG_CNT IS NULL OR YIWANG_CNT < 0 THEN 0
  WHEN ROUND(YIWANG_CNT) > 240 THEN ROUND(LN(241),2)
  ELSE ROUND(LN(ROUND(YIWANG_CNT)+1),2)
    END YIWANG_CNT,
NVL(IS_WOJT_USER,0) IS_WOJT_USER,
CASE WHEN CALL_DAYS IS NULL OR CALL_DAYS < 1 THEN 0
  WHEN CALL_DAYS > 31 THEN 31
  ELSE CALL_DAYS
    END CALL_DAYS,
CASE WHEN VALID_CALL_RING IS NULL OR VALID_CALL_RING < 1 THEN 0
  WHEN VALID_CALL_RING > 40 THEN ROUND(LN(41),2)
  ELSE ROUND(LN(VALID_CALL_RING+1),2)
    END VALID_CALL_RING,
CASE WHEN CELLID_NUM IS NULL OR CELLID_NUM < 0 THEN 0
  WHEN CELLID_NUM > 230 THEN ROUND(LN(231),2)
  ELSE ROUND(LN(CELLID_NUM+1),2)
    END CELLID_NUM,
CASE WHEN LAST_JF_MONTH IS NULL THEN 6
  ELSE MONTHS_BETWEEN(TO_DATE('''||V_MONTH||''',''YYYYMM''),TO_DATE(LAST_JF_MONTH,''YYYYMM''))
    END LAST_JF_MONTH,
NVL(JF_MON,3) JF_MON,
CASE WHEN NET_TYPE IN (''3'',''4'') THEN 1
  ELSE 0
    END NET_TYPE,
CASE WHEN MANU_NAME = ''Apple'' THEN 1
  WHEN MANU_NAME = ''Samsung'' THEN 2
    WHEN MANU_NAME = ''Xiaomi'' THEN 3
      ELSE 0
        END MANU_NAME,
CASE WHEN DEV_NUM_SHANG IS NULL THEN 2.4
  ELSE ROUND(DEV_NUM_SHANG,2)
    END DEV_NUM_SHANG,
CASE WHEN AGREE_TYPE IN (''2'',''7'') THEN 1
  ELSE 0
    END AGREE_TYPE,
CASE WHEN AGREE_EXP_DATE IN ('''||V_MONTH1||''','''||V_MONTH2||''','''||V_MONTH||''','''||V_MONTH3||''','''||V_MONTH4||''','''||V_MONTH5||''') THEN 1
  ELSE 0
    END AGREE_EXP
FROM MID_V_M_3G_LOST_STEP1
WHERE MONTH_ID = '''||V_MONTH||'''
AND PROV_ID = '''||V_PROV||'''

';
    EXECUTE IMMEDIATE V_SQL;
    V_ROWLINE := SQL%ROWCOUNT;
    COMMIT;


    V_RETCODE := 'SUCCESS';
    V_RETINFO := '结束';
ELSE
    V_RETCODE := 'WAIT';
    V_RETINFO := '等待数据';
END IF;



  -- 更新执行结果
  P_UPDATE_LOG(V_MONTH ,
               V_PKG,
               V_PROCNAME,
               V_PROV,
               V_RETINFO,
               V_RETCODE,
               SYSDATE,
               V_ROWLINE);
               P_UPDATE_SQLPARSER_LOG_GENERAL(V_LOG_SN, V_RETCODE, V_RETINFO);
EXCEPTION
  WHEN OTHERS THEN
    V_RETCODE := 'FAIL';
    V_RETINFO := SQLERRM;
    P_UPDATE_LOG(V_MONTH ,
                 V_PKG,
                 V_PROCNAME,
                 V_PROV,
                 V_RETINFO,
                 V_RETCODE,
                 SYSDATE,
                 V_ROWLINE);
                 P_UPDATE_SQLPARSER_LOG_GENERAL(V_LOG_SN, V_RETCODE, V_RETINFO);
END;
/
